# @param {Character[][]} board
# @return {Boolean}
require 'set'

def is_valid_sudoku(board)
  rows  = Array.new(9) { Set.new }
  cols  = Array.new(9) { Set.new }

  board.each_with_index do |row, i|
    row.each_with_index do |num, j|
      next if num == '.'

      return false if rows[i].include?(num)
      rows[i].add(num)

      return false if cols[j].include?(num)
      cols[j].add(num)

    end
  end

  # check sub-box
  starts = [0, 3, 6]
  return starts.product(starts).all? do |r, c|
    vals = board[r, 3].flat_map { |row| row[c, 3] }.reject { |v| v == '.' }
    vals.uniq.size == vals.size
  end

end



board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
puts(is_valid_sudoku(board))

board = [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
puts(is_valid_sudoku(board))

board = [
  [".",".",".",".","5",".",".","1","."],
  [".","4",".","3",".",".",".",".","."],
  [".",".",".",".",".","3",".",".","1"],
  ["8",".",".",".",".",".",".","2","."],
  [".",".","2",".","7",".",".",".","."],
  [".","1","5",".",".",".",".",".","."],
  [".",".",".",".",".","2",".",".","."],
  [".","2",".","9",".",".",".",".","."],
  [".",".","4",".",".",".",".",".","."]
]
puts(is_valid_sudoku(board))

